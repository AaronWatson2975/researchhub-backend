# Generated by Django 2.2 on 2022-08-30 00:26

from django.db import migrations, models
import django.db.models.deletion


def migrate_paper_to_unified_document(apps, schema_editor):
    ResearchhubUnifiedDocument = apps.get_model('researchhub_document', 'ResearchhubUnifiedDocument')
    DocumentFilter = apps.get_model('researchhub_document', 'DocumentFilter')
    unified_documents = ResearchhubUnifiedDocument.objects.all().order_by("id")

    objs = []
    for i, uni_doc in enumerate(unified_documents.iterator()):
        print(i)
        doc_filter = DocumentFilter.objects.create()
        uni_doc.document_filter = doc_filter
        objs.append(uni_doc)
        if len(objs) >= 1000:
            print("UPDATING")
            ResearchhubUnifiedDocument.objects.bulk_update(objs, ["document_filter"])
            objs = []
    ResearchhubUnifiedDocument.objects.bulk_update(objs, ["document_filter"])


from django.db import connection
from threading import Thread


def add_filter(start_id, stop_id, apps=None):
    ResearchhubUnifiedDocument = apps.get_model('researchhub_document', 'ResearchhubUnifiedDocument')
    DocumentFilter = apps.get_model('researchhub_document', 'DocumentFilter')
    unified_documents = ResearchhubUnifiedDocument.objects.filter(id__gte=start_id, id__lt=stop_id).order_by("id")

    objs = []
    for i, uni_doc in enumerate(unified_documents.iterator()):
        print(i)
        doc_filter = DocumentFilter.objects.create()
        uni_doc.document_filter = doc_filter
        objs.append(uni_doc)
        if len(objs) >= 1000:
            print("UPDATING")
            ResearchhubUnifiedDocument.objects.bulk_update(objs, ["document_filter"])
            objs = []
    ResearchhubUnifiedDocument.objects.bulk_update(objs, ["document_filter"])
    print("-----COMPLETE-----")
    connection.close()
    return True


def migrate(apps, schema_editor):
    ResearchhubUnifiedDocument = apps.get_model('researchhub_document', 'ResearchhubUnifiedDocument')
    count = ResearchhubUnifiedDocument.objects.all().count()

    for i in range(5, count, 5):
        t = Thread(target=add_filter, args=(i-5, i), kwargs={"apps": apps})
        t.daemon = True
        t.start()
    else:
        t = Thread(target=add_filter, args=(i, i+1000), kwargs={"apps": apps})
        t.daemon = True
        t.start()
    t.join(timeout=5)
    # for i in range(100000, count, 100000):
    #     t = Thread(target=add_filter, args=(i-100000, i), kwargs={"apps": apps})
    #     t.daemon = True
    #     t.start()
    # else:
    #     t = Thread(target=add_filter, args=(i, i+10000))
    #     t.daemon = True
    #     t.start()
    # connection.close()


from django.db import connection
from threading import Thread

def add_filter(start_id, stop_id):
    unified_documents = ResearchhubUnifiedDocument.objects.filter(id__gte=start_id, id__lt=stop_id).order_by("id")
    print(unified_documents.first().id, unified_documents.last().id)

    objs = []
    for i, uni_doc in enumerate(unified_documents.iterator()):
        doc_filter = DocumentFilter.objects.create()
        uni_doc.document_filter = doc_filter
        objs.append(uni_doc)
        if len(objs) >= 1000:
            print("UPDATING")
            ResearchhubUnifiedDocument.objects.bulk_update(objs, ["document_filter"])
            objs = []
    ResearchhubUnifiedDocument.objects.bulk_update(objs, ["document_filter"])
    print("COUNT UPDATED - ",len(objs))
    print("-----COMPLETE-----")
    connection.close()

def migrate_1():
    count = ResearchhubUnifiedDocument.objects.all().count()
    for i in range(100000, count, 100000):
        t = Thread(target=add_filter, args=(i-100000, i))
        t.daemon = True
        t.start()
    else:
        t = Thread(target=add_filter, args=(i, i+1000))
        t.daemon = True
        t.start()

def update_ts(start_id, stop_id):
    filters = DocumentFilter.objects.filter(id__gte=start_id, id__lt=stop_id).order_by("id")
    for i, doc_filter in enumerate(filters.iterator()):
        if i % 1000 == 0:
            print(i)

        objs = []
        doc_filter.discussed_date_ts = doc_filter.discussed_date.timestamp()
        objs.append(doc_filter)
        if len(objs) >= 1000:
            print("UPDATING")
            DocumentFilter.objects.bulk_update(objs, ["discussed_date_ts"])
            objs = []
    DocumentFilter.objects.bulk_update(objs, ["discussed_date_ts"])
    print("COUNT UPDATED - ",len(objs))
    print("-----COMPLETE-----")
    connection.close()

def migrate_2():
    # count = DocumentFilter.objects.all().count()
    for i in range(100000, 1203741, 100000):
        t = Thread(target=update_ts, args=(i-100000, i))
        t.daemon = True
        t.start()
    t = Thread(target=update_ts, args=(i, i+1000))
    t.daemon = True
    t.start()
    t.join()
    connection.close()

from django.core.paginator import Paginator
from django.db import connection
from threading import Thread

def update_discussed(paginator, page_number):
    page = paginator.page(page_number)
    updates = []
    print("STARTING")
    for obj in page.iterator():
        try:
            discussed_date = obj.update_discussed_date(None, None)
            obj.discussed_date_ts = obj.discussed_date.timestamp()
        except Exception as e:
            print(e)
    DocumentFilter.objects.bulk_update(updates, ["discussed_date", "discussed_date_ts"])
    print("COMPLETED")
    connection.close()

def migrate_3():
    CHUNK_SIZE = 100000
    qs = DocumentFilter.objects.all().order_by("-id")
    paginator = Paginator(qs, CHUNK_SIZE)

    for page_number in paginator.page_range:
        t = Thread(target=update_discussed, args=(paginator, page_number))
        t.daemon = True
        t.start()

"""
ResearchhubUnifiedDocument.objects.all().update(document_filter=None)
total: 1250302
id:    1250500
"""

class Migration(migrations.Migration):

    dependencies = [
        ('researchhub_document', '0041_auto_20220705_1646'),
    ]

    operations = [
        migrations.CreateModel(
            name='DocumentFilter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('answered', models.BooleanField(db_index=True, default=False)),
                ('author_claimed', models.BooleanField(db_index=True, default=False)),
                ('bounty_closed', models.BooleanField(db_index=True, default=False)),
                ('bounty_expired', models.BooleanField(db_index=True, default=False)),
                ('bounty_open', models.BooleanField(db_index=True, default=False)),
                ('has_bounty', models.BooleanField(db_index=True, default=False)),
                ('open_access', models.BooleanField(db_index=True, default=False)),
                ('peer_reviewed', models.BooleanField(db_index=True, default=False)),
                ('bounty_expiration_date', models.DateTimeField(null=True)),
                ('bounty_total_amount', models.DecimalField(null=True, db_index=True, decimal_places=10, max_digits=19)),
                ('discussed_today', models.IntegerField(db_index=True, default=0)),
                ('discussed_week', models.IntegerField(db_index=True, default=0)),
                ('discussed_month', models.IntegerField(db_index=True, default=0)),
                ('discussed_all', models.IntegerField(db_index=True, default=0)),
                ('discussed_date', models.DateTimeField(auto_now_add=True)),
                # ('discussed_today_date', models.DateTimeField(auto_now_add=True)),
                # ('discussed_week_date', models.DateTimeField(auto_now_add=True)),
                # ('discussed_month_date', models.DateTimeField(auto_now_add=True)),
                # ('discussed_year_date', models.DateTimeField(auto_now_add=True)),
                # ('discussed_all_date', models.DateTimeField(auto_now_add=True)),
                ('upvoted_today', models.IntegerField(db_index=True, default=0)),
                ('upvoted_week', models.IntegerField(db_index=True, default=0)),
                ('upvoted_month', models.IntegerField(db_index=True, default=0)),
                ('upvoted_all', models.IntegerField(db_index=True, default=0)),
                ('upvoted_date', models.DateTimeField(auto_now_add=True)),
                # ('upvoted_today_date', models.DateTimeField(auto_now_add=True)),
                # ('upvoted_week_date', models.DateTimeField(auto_now_add=True)),
                # ('upvoted_month_date', models.DateTimeField(auto_now_add=True)),
                # ('upvoted_year_date', models.DateTimeField(auto_now_add=True)),
                # ('upvoted_all_date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.AddIndex(
            model_name='documentfilter',
            index=models.Index(fields=['created_date'], name='flt_created_date_idx'),
        ),
        migrations.AddIndex(
            model_name='documentfilter',
            index=models.Index(fields=['bounty_expiration_date'], name='flt_bounty_expiration_date_idx'),
        ),
        migrations.AddIndex(
            model_name='documentfilter',
            index=models.Index(fields=['discussed_date'], name='flt_discussed_date_idx'),
        ),
        # migrations.AddIndex(
        #     model_name='documentfilter',
        #     index=models.Index(fields=['discussed_today_date'], name='flt_discussed_today_date_idx'),
        # ),
        # migrations.AddIndex(
        #     model_name='documentfilter',
        #     index=models.Index(fields=['discussed_week_date'], name='flt_discussed_week_date_idx'),
        # ),
        # migrations.AddIndex(
        #     model_name='documentfilter',
        #     index=models.Index(fields=['discussed_month_date'], name='flt_discussed_month_date_idx'),
        # ),
        # migrations.AddIndex(
        #     model_name='documentfilter',
        #     index=models.Index(fields=['discussed_year_date'], name='flt_discussed_year_date_idx'),
        # ),
        # migrations.AddIndex(
        #     model_name='documentfilter',
        #     index=models.Index(fields=['discussed_all_date'], name='flt_discussed_all_date_idx'),
        # ),
        # migrations.AddIndex(
        #     model_name='documentfilter',
        #     index=models.Index(fields=['upvoted_today_date'], name='flt_upvoted_today_date_idx'),
        # ),
        # migrations.AddIndex(
        #     model_name='documentfilter',
        #     index=models.Index(fields=['upvoted_week_date'], name='flt_upvoted_week_date_idx'),
        # ),
        # migrations.AddIndex(
        #     model_name='documentfilter',
        #     index=models.Index(fields=['upvoted_month_date'], name='flt_upvoted_month_date_idx'),
        # ),
        # migrations.AddIndex(
        #     model_name='documentfilter',
        #     index=models.Index(fields=['upvoted_year_date'], name='flt_upvoted_year_date_idx'),
        # ),
        # migrations.AddIndex(
        #     model_name='documentfilter',
        #     index=models.Index(fields=['upvoted_all_date'], name='flt_upvoted_all_date_idx'),
        # ),
        migrations.AddIndex(
            model_name='documentfilter',
            index=models.Index(fields=['upvoted_date'], name='flt_upvoted_date_idx'),
        ),
        migrations.AddField(
            model_name='researchhubunifieddocument',
            name='document_filter',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='unified_document', to='researchhub_document.DocumentFilter'),
        ),
        # migrations.RunPython(migrate_paper_to_unified_document),
        # migrations.RunPython(migrate),
        # migrations.AlterField(
        #     model_name='researchhubunifieddocument',
        #     name='document_filter',
        #     field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='unified_document', to='researchhub_document.DocumentFilter'),
        # ),
    ]
